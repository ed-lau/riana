[
  {
    "objectID": "change.html",
    "href": "change.html",
    "title": "Change Log",
    "section": "",
    "text": "RIANA now supports a Snakemake pipeline that performs protein database search, filtering, integration and fitting\nAdded native support to perform curve-fitting and output best-fit curve plots\nAdded support for one-pool, two-compartment (Guan et al.) and three-exponent (Fornasiero et al.) models\nMatch between runs is temporarily disabled to support the Snakemake workflow and will return in a later version."
  },
  {
    "objectID": "change.html#update-v.0.6.4",
    "href": "change.html#update-v.0.6.4",
    "title": "Change Log",
    "section": "Update v.0.6.4",
    "text": "Update v.0.6.4\n\nAdded support for standalone Percolator results for v.3.0.5.\nOrganize the project in identical manner, include one psms.txt for target psms (output of Percolator -m tag) in each percolator folder.\nWhen using standalone Percolator dist, peptide masses are calculated de novo\nToggle match between runs using –mbr or -b\nNo longer writes results of individual fractions separately."
  },
  {
    "objectID": "change.html#update-v.0.6.3",
    "href": "change.html#update-v.0.6.3",
    "title": "Change Log",
    "section": "Update v.0.6.3",
    "text": "Update v.0.6.3\n\nFixed an issue where mbr all-NaN slice causes an error\nChanged project directory structure so that mzml files have to be within an mzml subfolder and percolator files are in the percolator folder"
  },
  {
    "objectID": "change.html#update-v.0.6.0",
    "href": "change.html#update-v.0.6.0",
    "title": "Change Log",
    "section": "Update v.0.6.0",
    "text": "Update v.0.6.0\n\nStarted implementation of match between runs and restructured project for distribution via pip"
  },
  {
    "objectID": "change.html#update-v.0.5.0",
    "href": "change.html#update-v.0.5.0",
    "title": "Change Log",
    "section": "Update v.0.5.0",
    "text": "Update v.0.5.0\n\nUpdated to use pymzml 2.2.\nMulti-threading is now supported with the –thread argument.\nRIANA now loads all the spectra needed for integration into memory.\nCompared to v.0.4.0 there should now be a substantial speed gain and can finish a sizeable fraction (~1 Gb raw file) in 10 min.\nUser-definable mass tolerance for MS1 integration is now supported via the –masstolerance argument [default 100 ppm]."
  },
  {
    "objectID": "change.html#update-v.0.4.0",
    "href": "change.html#update-v.0.4.0",
    "title": "Change Log",
    "section": "Update v.0.4.0",
    "text": "Update v.0.4.0\n\nUpdated to use python 3.5+, up-to-date scipy and numpy, pymzml.\nMulti-fraction runs are now supported - the mzml files in the directory need to be the same as the order they appear in the Percolator indices (check the Percolator output log file if unsure). For the most cases this shouldn’t present a problem if the mzml directory contains exactly the same mzml files used for the database search, unless there is a difference in how the operating system order files on the search computer (e.g., file_10.mzml vs. file_2. mzml) or if one of the fractions contained no protein ID and Crux/Percolator decided to skip the file in its indexing.\nTo support multi-fraction analysis, RIANA now takes in Percolator tab delimited files for protein ID rather than mzid. Mzid support will be added back in in a future version."
  },
  {
    "objectID": "faqs.html",
    "href": "faqs.html",
    "title": "Frequently Asked Questions",
    "section": "",
    "text": "A: The -D flag specifies the accurate mass difference between each unit isotopomer and can be set to D, C13, or SILAC, which will dictate the mass difference across each successive peak to be 1.0063 (mass difference of deuterium and protium), 1.003 (mass difference of 13C and 12C), and 1.001 (custom SILAC mass), respectively. This is set so that RIANA can find the correct accurate mass for integration when multiple atom centers are added. E.g., if deuterium labeled amino acids are used, e.g., D3-leucine, the argument should be set to -D D and the integrated isotopomer argument set to -i 0, 3. Alternatively if 13C6-lysines, the arguments should be -D C13 and i 0,6.\n\n\n\n\n\n\nA: Coming soon.\n\n\n\nA: The directories are intended to facilitate navigation only rather than a rigorous indication of data quality. Plots for fitted curves with k < 0.01 are in the “slow” directory, 0.01 <= k <= 1 in the “mid” directory, and 1 < k in the “fast” directory. Plots for fitted curves with R2 >= 0.5 are in the “fit” directory, and those with R2 < 0.5 are in the “poor” directory.\n\n\n\nA: RIANA currently performs curve fitting at the peptide level only. Users can perform protein-level curve fitting using the {sample}_riana.txt integration result files. Alternatively, protein-level rate constants can be derived by taking a median or harmonic mean of the peptide-level rate constants with similar results, as we showed in our recent publication.\n\n\n\nA: The half-life of a peptide or protein can be calculated from the output k parameter using the equation:\n\\[ t_{1/2} = ln(2)/k \\]\n\n\n\n\n\n\nA: Contact us at [edward.lau@cuanschutz.edu]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "RIANA - Relative Isotope Abundance Analyzer",
    "section": "",
    "text": "Edward Lau Lab, University of Colorado School of Medicine"
  },
  {
    "objectID": "index.html#about-riana",
    "href": "index.html#about-riana",
    "title": "RIANA - Relative Isotope Abundance Analyzer",
    "section": "About RIANA",
    "text": "About RIANA\nRIANA (Relative Isotope Abundance Analyzer) is a software to automate the analysis of mass spectrometry- based protein turnover measurement experiments.\nRIANA is written to be flexible to accommodate different protein stable isotope labels, including heavy water (D2O) and SILAC (e.g., 13C6-lysine or other amino acids) experiments.\nRIANA supports a Snakemake pipeline that uses other existing tools in the community, requiring only mass spectrometry data files (.mzML) as input to perform database search, post-processing, peak integration, and output of best-fit kinetic rate constants.\n\n\n\nRIANA Workflow"
  },
  {
    "objectID": "index.html#downloads",
    "href": "index.html#downloads",
    "title": "RIANA - Relative Isotope Abundance Analyzer",
    "section": "Downloads",
    "text": "Downloads\n\n\nLatest Updates\nv0.7.0\n\n\nRIANA now supports a Snakemake pipeline that performs protein database search, filtering, integration and fitting\nAdded native support to perform curve-fitting and output best-fit curve plots\nAdded support for one-pool, two-compartment (Guan et al.) and three-exponent (Fornasiero et al.) models\nMatch between runs is temporarily disabled to support the Snakemake workflow and will return in a later version.\n\n\nSee Change Log for details.\n\nThe latest version and source code of RIANA can be found on github: https://github.com/ed-lau/riana.\nSee the Quick Start and Documentation for instructions."
  },
  {
    "objectID": "index.html#contributors",
    "href": "index.html#contributors",
    "title": "RIANA - Relative Isotope Abundance Analyzer",
    "section": "Contributors",
    "text": "Contributors\n\nEdward Lau, PhD - ed-lau"
  },
  {
    "objectID": "index.html#citations",
    "href": "index.html#citations",
    "title": "RIANA - Relative Isotope Abundance Analyzer",
    "section": "Citations",
    "text": "Citations\n\nHarmonizing Labeling and Analytical Strategies to Obtain Protein Turnover Rates in Intact Adult animals. Hammond DE, Simpson DM, Franco C, Wright Muelas M, Wasters J, Ludwig RW, PRescott MC, Hurst JL, Beynon RJ, E Lau Molecular & Cellular Proteomics 2022, 100252 doi:10.1016/j.mcpro.2022.100252"
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Quick Start",
    "section": "",
    "text": "Install Python 3.7+ and pip. See instructions on Python website for specific instructions for your operating system.\nRiana can be installed from PyPI via pip or directly from GitHub. We recommend using a virtual environment.\n$ pip install riana\nLaunch riana as a module (Usage/Help):\n$ python -m riana\nAlternatively as a console entry point:\n$ riana\nTo test that the installation can load test data files in tests/data:\n$ pip install tox\n$ tox\nTo run the Riana test dataset (a single fraction bovine serum albumin file from a Q-Exactive) and write the results to a specified out/test/ directory\n$ python -m riana integrate tests/data/sample1/ tests/data/sample1/percolator.target.psms.txt -q 0.1 -i 0,1,2,3,4,5 -o out/test/"
  },
  {
    "objectID": "install.html#processing-datasets",
    "href": "install.html#processing-datasets",
    "title": "Quick Start",
    "section": "Processing Datasets",
    "text": "Processing Datasets\n\nVia Snakemake\nRIANA comes with a Snakemake pipeline which is the recommended way to run RIANA. To configure, edit the provided config_template.yaml to specify the location of Comet and Percolator executables. Then run Snakemake with the provided Snakefile, e.g.,:\n$ snakemake -c -s ./Snakefile -d out/snakemake_test --configfile ./config_template.yaml\nRefer to Snakemake documentations for details on configuring snake files.\n\n\n\n\n\n\nCurve plotting\n\n\n\nNote that the provided Snakefile settings do not automatically output plotted curves or pre-integration intensity files by default. To output these files, edit the Snakefile to add -w and p to the shell commands under the integrate and fit rules, respectively.\n\n\nBelow is the config_template.yaml:\n# Config\n\n# Data location. Add as many lines as needed, sample names should be named after\n# labeling time points (e.g., time12 for 12 days/12 hours of experiment)\ndata:\n  time0: /path/to/time0/folder\n  time1: /path/to/time1/folder\n  time3: /path/to/time3/folder\n  time6: /path/to/time6/folder\n\n# Paths to the comet executable, the comet params file, the database, and the percolator executable\n# The Snakefile assumes riana can be executed in the shell by riana\npaths:\n  comet: /path/to/comet_source_2020013/comet.exe\n  comet_params: /path/to/params/comet.params\n  fasta: /path/tp/database.fas\n  percolator: /path/to/percolator\n\n# Integration and fitting parameters\nparams:\n  model: simple     # fitting model (simple, guan, fornasiero)\n  label_type: hw        # labeling type (aa or hw)\n  isotopomers: 0,1,2,3,4,5   # isotopomer to integrate (0,1,2,3,4,5 for deuterium; 0,6 for heavy aa)\n  mass_tol: 15         # mass tolerance in ppm for integration (e.g., 25)\n  ria_max: 1          # final precursor ria\n  kp: 10              # guan model parameter (kp) or fornasiero model parameter (b)\n  kr: 0.15              # fornasiero model parameter (a)\n  rp: 5.52              # fornasiero model parameter (r)\n  depth: 1             # minimum number of data points\n  aa: K                 # which amino acid carries heavy label; only relevant if label_type is aa\n  mass_defect: D        # which isotope mass defect to use (D, C13, SILAC)\n\n# Number of threads\nthreads:\n  comet: 8\n  riana: 4\n  fitcurve: 12\n\n\n\nManual Runs\nAlternatively, RIANA can be directly called from command line given the paths to the folder of the mzML files and the Search/Percolator results. To run the turnover analysis pipeline manually, prepare the following expected input files:\n\nRIANA was tested on the percolator output file from Crux Tide/Percolator or standalone Comet/Percolator.\nThe following workflow has been tested for both amino acid and heavy water labeling data gathered on a Q-Exactive instrument:\nConvert raw files to mzML, using pwiz 3.0 msconvert in command line, with the following option:\n\n--filter \"peakPicking vendor\"\n\nDownload the latest Crux distribution\nRun Tide index with the following options:\n\n--digestion partial-digest\n--missed-cleavages\n\nRun Tide search for each experimental time point separately with the following options:\n\n--isotope-error 1,2 (for HW) or 6,12 (for AA)\n--compute-sp T\n--mz-bin-width 0.02\n--mz-bin-offset 0.0\n--precursor-window 20\n--precursor-window-type ppm\n\nRun Percolator with the following options:\n\n--protein T\n--decoy-prefix DECOY_\n\nRun RIANA integrate for each experimental time point separately.\nRun RIANA fit\n\n\n\n\n\n\n\nSpecifying paths\n\n\n\nNote that the mzml_path argument should point to the directory where all mzML fractions (fraction1.mzML, fraction2.mzML, etc.) for each labeling time point are located, whereas the id_path argument should point to a percolator.target.psms.txt file from the output of searching and post-processing all the mzML files in that labeling time point together"
  },
  {
    "objectID": "install.html#output",
    "href": "install.html#output",
    "title": "Quick Start",
    "section": "Output",
    "text": "Output\nRIANA integrate outputs a {sample}_riana.txt file for each sample, which contains the Percolator output appended with additional columns, e.g., m0, m6, m12, which contains the integrated areas of each isotopomer of each peptide over a retention time range in the mass spectrometry data. The output columns depend on the isotopomer indices specified.\nIn addition, the {sample}_riana_intensities.txt files contain the individual intensity data of each isotopomer in each retention time point prior to integration.\nRIANA fit outputs a riana_fit_peptides.csv file which contains the best-fit k, R2, and dk for each peptide-charge combination.\nIf --plotcurve is set, RIANA additional outputs a graphical representation of each fitted curve:\n\n\n\nFitted Curve"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Documentations",
    "section": "",
    "text": "RIANA has two components, integrate and fit (experimental), which can be individually called using riana integrate and riana fit. For the help message of each component, type riana integrate -h and riana fit -h.\n\n\nThe integrate component reads in mass spectrometry data files (.mzML) and the corresponding Percolator search result. The Percolator results cna be supplied directly to RIANA or generated automatically from the mass spectrometry data files using the included Snakemake ppeline).\nRIANA reads and filters the search result files based on the -q argument for Percolator adjusted P values and the -u flag for protein-unique peptides. For each qualifying peptide-charge concatamer, RIANA then calculates the accurate mass and m/z of the unlabeled (m0) isotopomer, as well as each of the successive isotopomers specified in the -i argument.\nRIANA then reads the corresponding mass spectrometry file and locate the scans from which the peptide was identified, plus a retention time (rt) window -r and retrieve the intensity over rt of each isotopomer. The areas-under-curve of each extracted ion chromatogram is then integrated usign the trapezoid method and written into the output file.\nThe intensity over rt data prior to integration can also be saved directly using the -w flag. This will create a large file (up to 10s of Gbs) for each experimental time point.\n\n\n\nRetrieved chromatograms of isotopomers m0-m6 for a peptide. Note the gradual decrease of the relative intensity of the m0 peak (lightest in color) as labeling proceeds (from left to right)\n\n\n\n\n\nThe fit component takes in the integration results from multiple mass spectrometry experiments, and fits the relative isotope abundance data across labeling time points to a specified kinetic model.\nThree models ar ecurrently supported. In the simple model, the relative isotope abundance over labeling time behavior of a peptide is described by an exponential decay equation with one parameter (\\(k\\)):\n\\[ A_t = A_{t=0} + (A_{t\\rightarrow \\infty} - A_{t=0}) \\cdot 1 - e^{-k t} \\]\nwhere \\(A_{t=0}\\) is the initial relative abundance of the m0 peak over the mi peaks, and is set to 1 in amino acid labeling experiments. \\(A_{t\\rightarrow \\infty}\\) is calculated based on the plateau relative isotope abundance, which is based on the number of labeling sites in a peptide and the precursor plateau enrichment. The latter is supplied through the -r argument in riana fit.\n Guan et al. 2012 PMID: 22444387Fornasiero et al. 2018 PMID: 30315172\nThe Guan and Fornasiero models are described in their respective publications.\n\n\n\n\n\n\nCurrent fitting limitations\n\n\n\nCurrently RIANA only calculates fractional synthesis of new peptides based on the decrease of the unlabeled (m0) over all specified isotopomers (m0 - mi). Future updates will allows specification of numerators and denominators in calculating fractional synthesis for more flexible experimental designs."
  },
  {
    "objectID": "about.html#all-options",
    "href": "about.html#all-options",
    "title": "Documentations",
    "section": "All Options",
    "text": "All Options\n\nRIANA integrate\nriana integrate -h\nusage: riana integrate [-h] [-s SAMPLE] [-i ISO] [-u] [-t THREAD] [-o OUT] [-q Q_VALUE] \n[-r R_TIME] [-m MASS_TOL] mzml_path id_path\n\npositional arguments:\n  mzml_path             <required> path to folder containing the mzml files\n  id_path               <required> path to the percolator output psms.txt file\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -s SAMPLE, --sample SAMPLE\n                        sample name to override mzml folder name, must include numbers, e.g., time1\n  -i ISO, --iso ISO     isotopes to do, separated by commas, e.g., 0,1,2,3,4,5 [default: 0,6]\n  -u, --unique          integrate unique peptides only\n  -t THREAD, --thread THREAD\n                        number of threads for concurrency [default: 1]\n  -o OUT, --out OUT     path to the output directory [default: riana]\n  -q Q_VALUE, --q_value Q_VALUE\n                        integrate only peptides with q value below this threshold [default: 1e-2]\n  -r R_TIME, --r_time R_TIME\n                        retention time (in minutes, both directions) tolerance for integration\n  -w, --write_intensities\n                        also write pre-integration intensities into a result file\n  -m MASS_TOL, --mass_tol MASS_TOL\n                        <integer> mass tolerance in ppm for integration [default 50 ppm]\n  -D {D,C13,SILAC}, --mass_defect {D,C13,SILAC}\n                        mass defect type [default: D]\n\n\n\n\nRIANA fit\nriana fit -h\nusage: __main__.py fit [-h] [-m {simple,guan,fornasiero}] [-l {aa,hw,o18}] [-a AA] [--kp KP] \n[--kr KR] [--rp RP] [-q Q_VALUE] [-d DEPTH] [-r RIA] [-o OUT] [-p] [-t THREAD] riana_path [riana_path ...]\n\npositional arguments:\n  riana_path            <required> paths to one or more integrate out text files \n                        (note: the sample field must include numericals corresponding \n                        to time units (e.g., time0, time 6)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m {simple,guan,fornasiero}, --model {simple,guan,fornasiero}\n                        kinetic models for fitting, currently only the simple exponential model \n                        is implemented [default: simple]\n  -l {aa,hw,o18}, --label {aa,hw,o18}\n                        labeling type [default: hw]\n  -a AA, --aa AA        which amino acid residue is label carrying [default: K]\n  --kp KP               for two-compartment models, the precursor rate constant [default: 0.5]\n  --kr KR               for the fornasiero model, the reutilization rate constant [default: 0.05]\n  --rp RP               for the fornasiero model, the ratio of protein bound to free precursors \n                        [default: 10]\n  -q Q_VALUE, --q_value Q_VALUE\n                        fits only peptide data points with q value below this threshold [default: 1e-2]\n  -d DEPTH, --depth DEPTH\n                        fits only peptides identified in at least this many samples [default: 6]\n  -r RIA, --ria RIA     final isotope enrichment levels, if known [default: 0.5]\n  -o OUT, --out OUT     path to the output directory [default: riana]\n  -p, --plotcurves      plot fitted curves\n  -t THREAD, --thread THREAD\n                        number of threads for concurrency [default: 1]"
  }
]